#include <iostream>
#include <cmath>
using namespace std;

int main(){
    int n;
    while(cin>>n && n!=0){
        int k = sqrt(n);  
        if(k*k < n) k++;
        int t = n-(k-1)*(k-1);
        if(k%2 == 0){
            if(t <= k)	cout << t << " " << k << endl;
            else		cout << k << " " << k-(t-k) << endl;
        }
        else{
            if(t <= k)	cout << k << " " << t << endl;
     		else 		cout << k-(t-k) << " " << k << endl;
        }
    }
    return 0;
}

/*
 1  2  9 10 25
 4  3  8 11 24
 5  6  7 12 23
16 15 14 13 22
17 18 19 20 21

1. 第8行sqrt(n)是要確認n在k*k的陣列
   -> 若n=8，則8在3*3的陣列 -> 3 = sqrt(8)+1=2+1
   -> 若n=9，則9在3*3的陣列 -> 3 = sqrt(9)
   第9行k是否要+1，取決於k*k是否等於n
   -> 若相等(n=9, k=3)則不用+1
   -> 若不相等(n=8, k=2)則需要+1，因為8是在3*3陣列，不是在2*2陣列
2. 若n=8，8必定在3*3的(1, 3), (2, 3), (3, 1), (3, 2), (3, 3)5個位置中(row=3或col=3)，
   在(k-1)*(k-1)的陣列中，存放的數值是1到(k-1)*(k-1) -> ex. 2*2的陣列的數值是1到4
   所以第10行刪除t=n-(k-1)*(k-1)代表 (k-1)*(k-1) < n < k*k -> ex. 4 < 8 < 9
3. 第11行k是奇數還是偶數，會影響數字遞增的方向
   -> 若k是奇數，在3*3的陣列中，最外圍遞增順序是5-6-7-8-9，也就是(3, 1)-(3, 2)-(3, 3)-(2, 3)-(1, 3) -> 先row=k遞增，再col=k遞增
   -> 若k是偶數，在4*4的陣列中，最外圍遞增順序是10-11-12-13-14-15-16，也就是(1, 4)-(2, 4)-(3, 4)-(4, 4)-(4, 3)-(4, 2)-(4, 1) -> 先col=k遞增，再row=k遞增
4. 若n=8, k=3奇數, t=4，還需要判斷第12行
   -> 若t<=k，則遞增的方向不用轉 -> ex. n=6 k=3 t=2 <=k 位置在(k, t)=(3, 2)
   -> 若t>k，則遞增的方向要轉 -> ex. n=8, k=3 t=4 >k 位置在(k-(t-k))=(3-1, 3)=(2, 3)
*/